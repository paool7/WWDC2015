[
 {
  "file": "/Users/Paul/Developer/iPhone apps/Personal/Paul Dippold-2015/Paul Dippold/ViewController.swift",
  "offset": 2834,
  "remove": 9394,
  "text": " UIButton\n    var timer = NSTimer()\n    override func prefersStatusBarHidden() -> Bool {\n        return true\n    }\n    override func viewDidLoad() {\n        \n        super.viewDidLoad()\n\n        if DeviceType.i6plus{\n            scale = 1\n            move = 40\n        } else if DeviceType.i6{\n            scale = 0.75\n            move = 15\n        } else if DeviceType.i5{\n            scale = 0.75\n            move = 45\n        } else if DeviceType.i4s{\n            scale = 0.5\n            move = 75\n        } else if DeviceType.ipad{\n            scale = 1\n            move = 0\n        }\n        \n        timer = NSTimer.scheduledTimerWithTimeInterval(1, target: self, selector: Selector(\"update\"), userInfo: nil, repeats: true)\n        otitle()\n        animate()\n    }\n    \n    func otitle(){\n\n        let blurEffect: UIBlurEffect = UIBlurEffect(style: .Dark)\n        \n         blurView = UIVisualEffectView(effect: blurEffect)\n        blurView.frame = CGRectMake(0, 0, self.view.frame.width, 60)\n        self.view.addSubview(blurView)\n        \n        let vibrancyView: UIVisualEffectView = UIVisualEffectView(effect: UIVibrancyEffect(forBlurEffect: blurEffect))\n        vibrancyView.frame = blurView.bounds\n        blurView.contentView.addSubview(vibrancyView)\n        \n        let label: UILabel = UILabel()\n        label.frame = CGRectMake(0, -10, self.view.frame.width, 50)\n        label.text = \"Paul Dippold\"\n        label.font = UIFont(name: \"HelveticaNeue\", size: 32)\n        label.textAlignment = .Center\n        label.textColor = UIColor.whiteColor()\n        vibrancyView.contentView.addSubview(label)\n        \n        let label2: UILabel = UILabel()\n        label2.frame = CGRectMake(0, 18, self.view.frame.width, 50)\n        label2.text = \"18 Years Old\"\n        label2.font = UIFont(name: \"HelveticaNeue\", size: 20)\n        label2.textAlignment = .Center\n        label2.textColor = UIColor.whiteColor()\n        vibrancyView.contentView.addSubview(label2)\n        \n    }\n    \n    func animate(){\n    \n        let path = UIBezierPath()\n        let sides = 6\n        let radius = 8\n   \n        let width = Float(min(125, 125))\n\n        let length = (width - 2) * cosf(Float(2.0 * M_PI) / Float(6) / 2.0) + Float(radius) * tanf(Float(2.0 * M_PI) / Float(sides) / 2.0) / 2.0\n        let sideLength = length * tanf(Float(2.0 * M_PI) / Float(sides) / 2.0)\n        \n        var point = CGPointMake(CGFloat((width / 2.0) + (sideLength / 2.0) - Float(radius) * tanf(Float(2.0 * M_PI) / Float(sides) / 2.0)), CGFloat(width - (width - length) / 2.0))\n        var angle = Float(M_PI)\n        path.moveToPoint(point)\n        \n        for var side = 0; side < sides; side++ {\n            \n            let x = Float(point.x) + (sideLength - Float(radius) * tanf(Float(2.0 * M_PI) / Float(sides) / 2.0) * 2.0) * cosf(angle)\n            let y = Float(point.y) + (sideLength - Float(radius) * tanf(Float(2.0 * M_PI) / Float(sides) / 2.0) * 2.0) * sinf(angle)\n            \n            point = CGPointMake(CGFloat(x), CGFloat(y))\n            path.addLineToPoint(point)\n            \n            let center = CGPointMake(CGFloat(Float(point.x) + Float(radius) * cosf(angle + Float(M_PI_2))), CGFloat(Float(point.y) + Float(radius) * sinf(angle + Float(M_PI_2))))\n            \n            path.addArcWithCenter(center, radius: CGFloat(Float(radius)), startAngle: CGFloat(angle) - CGFloat(M_PI_2), endAngle: CGFloat(angle) + CGFloat(Float(2.0 * M_PI) / Float(sides)) - CGFloat(M_PI_2), clockwise: true)\n            \n            point = path.currentPoint\n            angle += Float(2.0 * M_PI) / Float(sides)\n        }\n        \n        path.closePath()\n        \n        let center = CGPoint(x:CGRectGetMidX(CGPathGetBoundingBox(path.CGPath)), y:CGRectGetMidY(CGPathGetBoundingBox(path.CGPath)))\n        \n        let toOrigin = CGAffineTransformMakeTranslation(-center.x, -center.y)\n        path.applyTransform(toOrigin)\n        let rotation = CGAffineTransformMakeRotation(CGFloat(M_PI / 6.0))\n        path.applyTransform(rotation)\n        let fromOrigin = CGAffineTransformMakeTranslation(center.x, center.y)\n        path.applyTransform(fromOrigin)\n        \n        let maskLayer = CAShapeLayer()\n        maskLayer.path = path.CGPath\n        maskLayer.lineWidth = 2\n        maskLayer.strokeColor = UIColor.clearColor().CGColor;\n        maskLayer.fillColor = UIColor.whiteColor().CGColor;\n        let border = CAShapeLayer()\n        border.path = path.CGPath;\n        border.lineWidth = 2;\n        border.strokeColor = UIColor.blackColor().CGColor\n        border.fillColor = UIColor.clearColor().CGColor\n        \n        pic1.layer.mask = maskLayer\n        pic1.layer.addSublayer(border)\n        pic1.clipsToBounds = true\n        \n        let maskLayer2 = CAShapeLayer()\n        maskLayer2.path = path.CGPath\n        maskLayer2.lineWidth = 2\n        maskLayer2.strokeColor = UIColor.clearColor().CGColor;\n        maskLayer2.fillColor = UIColor.whiteColor().CGColor;\n        let border2 = CAShapeLayer()\n        border2.path = path.CGPath;\n        border2.lineWidth = 2;\n        border2.strokeColor = UIColor.blackColor().CGColor\n        border2.fillColor = UIColor.clearColor().CGColor\n        \n        background.layer.mask = maskLayer2\n        background.layer.addSublayer(border2)\n        background.clipsToBounds = true\n        \n        let maskLayer3 = CAShapeLayer()\n        maskLayer3.path = path.CGPath\n        maskLayer3.lineWidth = 2\n        maskLayer3.strokeColor = UIColor.clearColor().CGColor;\n        maskLayer3.fillColor = UIColor.whiteColor().CGColor;\n        let border3 = CAShapeLayer()\n        border3.path = path.CGPath;\n        border3.lineWidth = 2;\n        border3.strokeColor = UIColor.blackColor().CGColor\n        border3.fillColor = UIColor.clearColor().CGColor\n        \n        Awards.layer.mask = maskLayer3\n        Awards.layer.addSublayer(border3)\n        Awards.clipsToBounds = true\n        \n        let maskLayer4 = CAShapeLayer()\n        maskLayer4.path = path.CGPath\n        maskLayer4.lineWidth = 2\n        maskLayer4.strokeColor = UIColor.clearColor().CGColor;\n        maskLayer4.fillColor = UIColor.whiteColor().CGColor;\n        let border4 = CAShapeLayer()\n        border4.path = path.CGPath;\n        border4.lineWidth = 2;\n        border4.strokeColor = UIColor.blackColor().CGColor\n        border4.fillColor = UIColor.clearColor().CGColor\n        \n        hobbies.layer.mask = maskLayer4\n        hobbies.layer.addSublayer(border4)\n        hobbies.clipsToBounds = true\n        \n        let maskLayer5 = CAShapeLayer()\n        maskLayer5.path = path.CGPath\n        maskLayer5.lineWidth = 2\n        maskLayer5.strokeColor = UIColor.clearColor().CGColor;\n        maskLayer5.fillColor = UIColor.whiteColor().CGColor;\n        let border5 = CAShapeLayer()\n        border5.path = path.CGPath;\n        border5.lineWidth = 2;\n        border5.strokeColor = UIColor.blackColor().CGColor\n        border5.fillColor = UIColor.clearColor().CGColor\n        \n        experience.layer.mask = maskLayer5\n        experience.layer.addSublayer(border5)\n        experience.clipsToBounds = true\n        \n        \n        let maskLayer7 = CAShapeLayer()\n        maskLayer7.path = path.CGPath\n        maskLayer7.lineWidth = 2\n        maskLayer7.strokeColor = UIColor.clearColor().CGColor;\n        maskLayer7.fillColor = UIColor.whiteColor().CGColor;\n        let border7 = CAShapeLayer()\n        border7.path = path.CGPath;\n        border7.lineWidth = 2;\n        border7.strokeColor = UIColor.blackColor().CGColor\n        border7.fillColor = UIColor.clearColor().CGColor\n        \n        wallv.layer.mask = maskLayer7\n        wallv.layer.addSublayer(border7)\n        wallv.clipsToBounds = true\n        \n        \n        let maskLayer6 = CAShapeLayer()\n        maskLayer6.path = path.CGPath\n        maskLayer6.lineWidth = 2\n        maskLayer6.strokeColor = UIColor.clearColor().CGColor;\n        maskLayer6.fillColor = UIColor.whiteColor().CGColor;\n        let border6 = CAShapeLayer()\n        border6.path = path.CGPath;\n        border6.lineWidth = 2;\n        border6.strokeColor = UIColor.blackColor().CGColor\n        border6.fillColor = UIColor.clearColor().CGColor\n        \n        imageviewer.layer.mask = maskLayer6\n        imageviewer.layer.addSublayer(border6)\n        imageviewer.clipsToBounds = true\n\n\n    }\n    \n\n    \n    @IBAction func learn(sender: AnyObject) {\n        self.pic1.center = self.view.center\n        self.pic1.transform = CGAffineTransformIdentity\n        blurView.removeFromSuperview()\n        let blurEffect2: UIBlurEffect = UIBlurEffect(style: .Dark)\n        blurView2 = UIVisualEffectView(effect: blurEffect2)\n        \n        blurView2.frame = CGRectMake(0, 0, self.view.frame.width, 60)\n        self.view.addSubview(blurView2)\n        \n         vibrancyView2 = UIVisualEffectView(effect: UIVibrancyEffect(forBlurEffect: blurEffect2))\n        vibrancyView2.frame = blurView2.bounds\n        blurView2.contentView.addSubview(vibrancyView2)\n\n        \n        let label: UILabel = UILabel()\n        label.frame = CGRectMake(0, 0, self.view.frame.width, 60)\n        label.text = \"Choose Topic\"\n        label.font = UIFont(name: \"HelveticaNeue\", size: 32)\n        label.textAlignment = .Center\n        label.textColor = UIColor.whiteColor()\n        vibrancyView2.contentView.addSubview(label)\n        \n       button.frame = CGRectMake(0, 10, 40, 40)\n        \n        let",
 }
]
